"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>_});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),g=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=g(e.components);return o.createElement(u.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=g(n),_=r,m=c["".concat(u,".").concat(_)]||c[_]||i[_]||a;return n?o.createElement(m,s(s({ref:t},p),{},{components:n})):o.createElement(m,s({ref:t},p))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var g=2;g<a;g++)s[g]=n[g];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},28069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>i,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var o=n(87462),r=(n(67294),n(3905));const a={},s="Kong \u6307\u6807\u91c7\u96c6",l={unversionedId:"prometheus/Exporter/3.25-kong-metrics",id:"prometheus/Exporter/3.25-kong-metrics",title:"Kong \u6307\u6807\u91c7\u96c6",description:"Kong \u662f\u4e00\u4e2a\u5fae\u670d\u52a1\u7f51\u5173\u5de5\u5177\uff0c\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u7531\u4e8e\u7cfb\u7edf\u548c\u670d\u52a1\u7684\u7ec6\u5206\uff0c\u5bfc\u81f4\u7cfb\u7edf\u7ed3\u6784\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c \u4e3a\u4e86\u8de8\u5e73\u53f0\uff0c\u4e3a\u4e86\u7edf\u4e00\u96c6\u4e2d\u7ba1\u7406api\uff0c\u540c\u65f6\u4e3a\u4e86\u4e0d\u66b4\u9732\u540e\u7f6e\u670d\u52a1\u3002\u751a\u81f3\u6709\u65f6\u5019\u9700\u8981\u5bf9\u8bf7\u6c42\u8fdb\u884c\u4e00\u4e9b\u5b89\u5168\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u9650\u6d41\u3001\u7194\u65ad\u3001\u7070\u5ea6\u7b49\u4e2d\u95f4\u64cd\u4f5c\uff0c\u57fa\u4e8e\u6b64\u7c7b\u79cd\u79cd\u7684\u5ba2\u89c2\u9700\u6c42\u4e00\u4e2a\u7c7b\u4f3c\u7efc\u5408\u524d\u7f6e\u7684\u7cfb\u7edf\u5c31\u4ea7\u751f\u4e86\uff0c\u8fd9\u5c31\u662fAPI\u7f51\u5173\uff08API Gateway\uff09\u3002API\u7f51\u5173\u4f5c\u4e3a\u5206\u6563\u5728\u5404\u4e2a\u4e1a\u52a1\u7cfb\u7edf\u5fae\u670d\u52a1\u7684API\u805a\u5408\u70b9\u548c\u7edf\u4e00\u63a5\u5165\u70b9\uff0c\u5916\u90e8\u8bf7\u6c42\u901a\u8fc7\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u5165\u70b9\uff0c\u5373\u53ef\u8bbf\u95ee\u5185\u90e8\u6240\u6709\u7684 REST API \u670d\u52a1\u3002",source:"@site/wiki/ops/prometheus/03-Exporter/3.25-kong-metrics.md",sourceDirName:"prometheus/03-Exporter",slug:"/prometheus/Exporter/3.25-kong-metrics",permalink:"/zhengxuexian_blog/ops/prometheus/Exporter/3.25-kong-metrics",draft:!1,tags:[],version:"current",lastUpdatedBy:"zhengxuexian",lastUpdatedAt:1661407442,formattedLastUpdatedAt:"2022\u5e748\u670825\u65e5",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Slurm Exporter",permalink:"/zhengxuexian_blog/ops/prometheus/Exporter/3.24-slurm-exporter"},next:{title:"HAProxy Exporter",permalink:"/zhengxuexian_blog/ops/prometheus/Exporter/3.26-haproxy-exporter"}},u={},g=[],p={toc:g};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kong-\u6307\u6807\u91c7\u96c6"},"Kong \u6307\u6807\u91c7\u96c6"),(0,r.kt)("p",null,"Kong \u662f\u4e00\u4e2a\u5fae\u670d\u52a1\u7f51\u5173\u5de5\u5177\uff0c\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u7531\u4e8e\u7cfb\u7edf\u548c\u670d\u52a1\u7684\u7ec6\u5206\uff0c\u5bfc\u81f4\u7cfb\u7edf\u7ed3\u6784\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c \u4e3a\u4e86\u8de8\u5e73\u53f0\uff0c\u4e3a\u4e86\u7edf\u4e00\u96c6\u4e2d\u7ba1\u7406api\uff0c\u540c\u65f6\u4e3a\u4e86\u4e0d\u66b4\u9732\u540e\u7f6e\u670d\u52a1\u3002\u751a\u81f3\u6709\u65f6\u5019\u9700\u8981\u5bf9\u8bf7\u6c42\u8fdb\u884c\u4e00\u4e9b\u5b89\u5168\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u9650\u6d41\u3001\u7194\u65ad\u3001\u7070\u5ea6\u7b49\u4e2d\u95f4\u64cd\u4f5c\uff0c\u57fa\u4e8e\u6b64\u7c7b\u79cd\u79cd\u7684\u5ba2\u89c2\u9700\u6c42\u4e00\u4e2a\u7c7b\u4f3c\u7efc\u5408\u524d\u7f6e\u7684\u7cfb\u7edf\u5c31\u4ea7\u751f\u4e86\uff0c\u8fd9\u5c31\u662fAPI\u7f51\u5173\uff08API Gateway\uff09\u3002API\u7f51\u5173\u4f5c\u4e3a\u5206\u6563\u5728\u5404\u4e2a\u4e1a\u52a1\u7cfb\u7edf\u5fae\u670d\u52a1\u7684API\u805a\u5408\u70b9\u548c\u7edf\u4e00\u63a5\u5165\u70b9\uff0c\u5916\u90e8\u8bf7\u6c42\u901a\u8fc7\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u5165\u70b9\uff0c\u5373\u53ef\u8bbf\u95ee\u5185\u90e8\u6240\u6709\u7684 REST API \u670d\u52a1\u3002"),(0,r.kt)("p",null,"Kong \u7684\u5b98\u65b9\u7f51\u7ad9\u662f ",(0,r.kt)("a",{parentName:"p",href:"https://konghq.com/kong/"},"https://konghq.com/kong/")," \uff0c\u9488\u5bf9 Kong \u7684\u76d1\u63a7\uff0c Kong \u63d0\u4f9b\u4e86\u4e00\u4e2a Prometheus \u7684\u63d2\u4ef6\u3002\u8fd9\u4e2a\u63d2\u4ef6\u662f\u9ed8\u8ba4\u5b89\u88c5 Kong \u7684\u65f6\u5019\u81ea\u5e26\u7684\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u5347\u7ea7\u3002\u5f53\u524d\u8fd9\u4e2a Prometheus \u7684\u76d1\u63a7\u63d2\u4ef6\u6700\u65b0\u7248\u672c\u662f 1.4.x \uff0c\u517c\u5bb9 Kong \u7684\u5927\u90e8\u5206\u7248\u672c\u3002\u8fd9\u4e2a\u63d2\u4ef6\u4ee5Prometheus \u516c\u5f00\u683c\u5f0f\u516c\u5f00\u4e0e Kong \u548c\u4ee3\u7406 Upstream \u670d\u52a1\u76f8\u5173\u7684\u5ea6\u91cf\uff0c\u53ef\u4ee5\u7531 Prometheus \u670d\u52a1\u5668\u6293\u53d6\u3002"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u63d2\u4ef6\u66fe\u7ecf\u662f\u5355\u72ec\u7ef4\u62a4\u7684\uff0c\u4ed3\u5e93\u5730\u5740\u662f ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Kong/kong-plugin-prometheus"},"https://github.com/Kong/kong-plugin-prometheus"),"  \uff0c\u5f53\u7248\u672c\u5230 1.1.0 \u4ee5\u540e\uff0c\u8fd9\u4e2a\u63d2\u4ef6\u7ef4\u62a4\u5230 Kong \u7684\u4e3b\u4ed3\u5e93\u91cc\u4e86\uff0c\u4e0d\u518d\u5355\u72ec\u7ef4\u62a4\u4e86\uff0c\u5730\u5740\u662f ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Kong/kong/tree/master/kong/plugins/prometheus"},"https://github.com/Kong/kong/tree/master/kong/plugins/prometheus")," \u3002"),(0,r.kt)("h1",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u63d2\u4ef6\u662f\u517c\u5bb9\u65e0\u6570\u636e\u5e93\u6a21\u5f0f\u7684\u3002"),(0,r.kt)("p",null,"\u5728\u65e0\u6570\u636e\u5e93\u6a21\u5f0f\u4e0b\uff0c\u9700\u8981\u58f0\u660e\u5f0f\u5730\u914d\u7f6e Kong Gateway\u3002\u56e0\u6b64\uff0cAdmin API\u4e3b\u8981\u662f\u53ea\u8bfb\u7684\uff0c\u5b83\u80fd\u6267\u884c\u7684\u552f\u4e00\u4efb\u52a1\u90fd\u4e0e\u5904\u7406\u58f0\u660e\u5f0f\u914d\u7f6e\u76f8\u5173\uff0c\u5305\u62ec:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728\u8d1f\u8f7d\u5747\u8861\u5668\u4e2d\u8bbe\u7f6e\u76ee\u6807\u7684\u5065\u5eb7\u72b6\u6001"),(0,r.kt)("li",{parentName:"ul"},"\u6839\u636e\u6a21\u5f0f\u9a8c\u8bc1\u914d\u7f6e\u7684\u7ed3\u679c"),(0,r.kt)("li",{parentName:"ul"},"\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"li"},"/config")," \u63a5\u53e3\u4e0a\u4f20\u58f0\u660e\u5f0f\u7684\u914d\u7f6e")),(0,r.kt)("p",null,"\u5f53 Kong \u5904\u4e8e\u65e0\u6570\u636e\u5e93\u6a21\u5f0f\u65f6\uff0cPrometheus \u91c7\u96c6\u7684\u76d1\u63a7\u6570\u636e\u4e2d\u5bf9\u4e8e\u6570\u636e\u5e93\u7684\u76d1\u63a7\u6307\u6807\u6c38\u8fdc\u662f\u6b63\u5e38\u72b6\u6001\u3002"),(0,r.kt)("p",null,"\u5bf9\u4e8e Kong \u7684 Prometheus \u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7 Admin API \u6765\u8fdb\u884c\u6253\u5f00\uff0c\u6267\u884c\u4e0b\u8fb9\u8fd9\u4e2a\u8bf7\u6c42\u6765\u6253\u5f00\u5168\u5c40\u7684\u76d1\u63a7"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -X POST http://{HOST}:8001/plugins/ \\\n    --data "name=prometheus" \n')),(0,r.kt)("p",null,"\u5982\u679c\u4f7f\u7528\u4e86 KongA \u7b49\u7ba1\u7406\u5de5\u5177\uff0c\u9996\u5148\u6253\u5f00\u7ba1\u7406\u5de5\u5177\uff0c\u6253\u5f00\u63d2\u4ef6\u9875\u9762\uff0c\u7136\u540e\u627e\u5230\u6dfb\u52a0\u63d2\u4ef6\uff0c\u641c\u7d22 Prometheus \u63d2\u4ef6\uff0c\u7136\u540e\u6253\u5f00\uff0c\u70b9\u51fb\u521b\u5efa\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002"),(0,r.kt)("p",null,"\u53e6\u5916\u6709\u4e00\u4e9b\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528\u5728\u63d2\u4ef6\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name\uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u63d2\u4ef6\u7684\u540d\u5b57\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f Prometheus\u3002"),(0,r.kt)("li",{parentName:"ul"},"service.id\uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u670d\u52a1\u7684\u63d2\u4ef6\u6807\u8bb0\u7684 ID"),(0,r.kt)("li",{parentName:"ul"},"enable\uff1a\u5e03\u5c14\u503c\uff0c\u8fd9\u4e2a\u63d2\u4ef6\u662f\u5426\u5f00\u542f\u7684\uff0c\u9ed8\u8ba4\u503c\u662f true \u3002"),(0,r.kt)("li",{parentName:"ul"},"config.per_consumer\uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u503c\u662f false\uff0c\u5b83\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u6536\u96c6\u6bcf\u4e2a\u6d88\u8d39\u8005\u7684\u6307\u6807\u3002\u5982\u679c\u542f\u7528\uff0ckong_http_consumer_status \u6307\u6807\u5c06\u88ab\u6dfb\u52a0\u5230\u5bfc\u51fa\u6307\u6807\u4e2d\u3002")),(0,r.kt)("p",null,"\u5728\u6700\u65b0\u7684 1.4.x \u7248\u672c\u4e2d\uff0c\u65b0\u589e\u4e86\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"data_plane_cluster_cert_expiry_timestamp")," \u6307\u6807\uff0c\u53e6\u5916Upstream Target health \u6307\u6807\u65b0\u589e\u4e86\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"subsystem")," label \u3002"),(0,r.kt)("p",null,"\u8fd9\u4e2a Prometheus \u63d2\u4ef6\u8bb0\u5f55\u5e76\u516c\u5f00\u8282\u70b9\u7ea7\u522b\u7684\u6307\u6807\uff0c\u4f60\u7684 Prometheus \u670d\u52a1\u5668\u5c06\u9700\u8981\u901a\u8fc7\u670d\u52a1\u53d1\u73b0\u673a\u5236\u53d1\u73b0\u6240\u6709\u7684Kong\u8282\u70b9\uff0c\u5e76\u4f7f\u7528\u6bcf\u4e2a\u8282\u70b9\u7684\u914d\u7f6e ",(0,r.kt)("inlineCode",{parentName:"p"},"/metrics")," \u63a5\u53e3\u83b7\u53d6\u6570\u636e\u3002"),(0,r.kt)("h1",{id:"\u53ef\u7528\u7684\u6307\u6807"},"\u53ef\u7528\u7684\u6307\u6807"),(0,r.kt)("p",null,"\u76ee\u524d\u53ef\u7528\u7684\u6307\u6807\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Status codes \uff1aUpstream\u670d\u52a1\u8fd4\u56de\u7684HTTP\u72b6\u6001\u7801\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u670d\u52a1\u3001\u6240\u6709\u670d\u52a1\u4ee5\u53ca\u6bcf\u4e2a\u7528\u6237\u7684\u8def\u7531\uff0c\u8fd9\u4e9b\u90fd\u662f\u53ef\u7528\u7684\u3002"),(0,r.kt)("li",{parentName:"ul"},"Latencies Histograms: \u5728 Kong \u5ef6\u8fdf\u7684\u76f4\u65b9\u7edf\u8ba1\u6570\u636e",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Request\uff1aKong\u548cUpstream\u670d\u52a1\u63d0\u4f9b\u8bf7\u6c42\u6240\u9700\u7684\u603b\u65f6\u95f4\u3002"),(0,r.kt)("li",{parentName:"ul"},"Kong\uff1aKong\u8def\u7531\u4e00\u4e2a\u8bf7\u6c42\u5e76\u8fd0\u884c\u6240\u6709\u914d\u7f6e\u7684\u63d2\u4ef6\u6240\u82b1\u8d39\u7684\u65f6\u95f4"),(0,r.kt)("li",{parentName:"ul"},"Upstream\uff1aUpstream\u670d\u52a1\u54cd\u5e94\u8bf7\u6c42\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002"))),(0,r.kt)("li",{parentName:"ul"},"Bandwidth\uff1a\u901a\u8fc7 Kong \u7684\u603b\u5e26\u5bbd(\u51fa\u53e3/\u8fdb\u53e3)\u3002\u8be5\u6307\u6807\u53ef\u7528\u4e8e\u6bcf\u4e2a\u670d\u52a1\uff0c\u5e76\u4f5c\u4e3a\u6240\u6709\u670d\u52a1\u7684\u603b\u548c\u3002"),(0,r.kt)("li",{parentName:"ul"},"DB reachability\uff1a\u503c\u4e3a0\u62161\u7684\u4e00\u79cd\u89c4\u683c\u7c7b\u578b\uff0c\u5b83\u8868\u793a\u4e00\u4e2aKong\u8282\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbeDB\u3002"),(0,r.kt)("li",{parentName:"ul"},"Connections\uff1a\u5404\u79cdNginx\u8fde\u63a5\u6307\u6807\uff0c\u5982\u6d3b\u52a8\u7684\uff0c\u8bfb\u7684\uff0c\u5199\u7684\uff0c\u548c\u63a5\u53d7\u7684\u8fde\u63a5\u6570\u3002"),(0,r.kt)("li",{parentName:"ul"},"Target Health\uff1a\u5c5e\u4e8e\u7ed9\u5b9a Upstream \u7684\u76ee\u6807\u53ca\u5176\u5b50\u7cfb\u7edf(http\u6216stream)\u7684\u5065\u5eb7\u72b6\u6001(healthchecks_off\u3001\u5065\u5eb7\u3001\u4e0d\u5065\u5eb7\u6216dns_error)\u3002"),(0,r.kt)("li",{parentName:"ul"},"Dataplane Status\uff1a\u5c06\u6570\u636e\u7684\u6700\u540e\u4e00\u6b21\u663e\u793a\u7684\u65f6\u95f4\u6233\u3001\u914d\u7f6e\u54c8\u5e0c\u503c\u3001\u914d\u7f6e\u540c\u6b65\u72b6\u6001\u548c\u8bc1\u4e66\u8fc7\u671f\u65f6\u95f4\u6233\u5bfc\u51fa\u5230\u63a7\u5236\u9875\u9762\u3002"),(0,r.kt)("li",{parentName:"ul"},"Enterprise License Information\uff1aKong Gateway license\u8fc7\u671f\u65e5\u671f\u3001\u7279\u6027\u548clicense\u7b7e\u540d\u3002\u8fd9\u4e9b\u6307\u6807\u53ea\u80fd\u5728Kong Gateway\u4e0a\u8f93\u51fa\u3002")),(0,r.kt)("p",null,"\u8bf7\u6c42\u5b89\u88c5\u4e86 Prometheus \u63d2\u4ef6\u7684 Kong \u7684\u76d1\u63a7\u6570\u636e\u63a5\u53e3\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7684\u6307\u6807\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -i http://localhost:8001/metrics\nHTTP/1.1 200 OK\nServer: openresty/1.15.8.3\nDate: Tue, 7 Jun 2020 16:35:40 GMT\nContent-Type: text/plain; charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\n\n# HELP kong_bandwidth Total bandwidth in bytes consumed per service/route in Kong\n# TYPE kong_bandwidth counter\nkong_bandwidth{type="egress",service="google",route="google.route-1"} 1277\nkong_bandwidth{type="ingress",service="google",route="google.route-1"} 254\n# HELP kong_datastore_reachable Datastore reachable from Kong, 0 is unreachable\n# TYPE kong_datastore_reachable gauge\nkong_datastore_reachable 1\n# HELP kong_http_consumer_status HTTP status codes for customer per service/route in Kong\n# TYPE kong_http_consumer_status counter\nkong_http_consumer_status{service="s1",route="s1.route-1",code="200",consumer="<CONSUMER_USERNAME>"} 3\n# HELP kong_http_status HTTP status codes per service/route in Kong\n# TYPE kong_http_status counter\nkong_http_status{code="301",service="google",route="google.route-1"} 2\n# HELP kong_latency Latency added by Kong, total request time and upstream latency for each service in Kong\n# TYPE kong_latency histogram\nkong_latency_bucket{type="kong",service="google",route="google.route-1",le="00001.0"} 1\nkong_latency_bucket{type="kong",service="google",route="google.route-1",le="00002.0"} 1\n.\n.\n.\nkong_latency_bucket{type="kong",service="google",route="google.route-1",le="+Inf"} 2\nkong_latency_bucket{type="request",service="google",route="google.route-1",le="00300.0"} 1\nkong_latency_bucket{type="request",service="google",route="google.route-1",le="00400.0"} 1\n.\n.\nkong_latency_bucket{type="request",service="google",route="google.route-1",le="+Inf"} 2\nkong_latency_bucket{type="upstream",service="google",route="google.route-1",le="00300.0"} 2\nkong_latency_bucket{type="upstream",service="google",route="google.route-1",le="00400.0"} 2\n.\n.\nkong_latency_bucket{type="upstream",service="google",route="google.route-1",le="+Inf"} 2\nkong_latency_count{type="kong",service="google",route="google.route-1"} 2\nkong_latency_count{type="request",service="google",route="google.route-1"} 2\nkong_latency_count{type="upstream",service="google",route="google.route-1"} 2\nkong_latency_sum{type="kong",service="google",route="google.route-1"} 2145\nkong_latency_sum{type="request",service="google",route="google.route-1"} 2672\nkong_latency_sum{type="upstream",service="google",route="google.route-1"} 527\n# HELP kong_nginx_http_current_connections Number of HTTP connections\n# TYPE kong_nginx_http_current_connections gauge\nkong_nginx_http_current_connections{state="accepted"} 8\nkong_nginx_http_current_connections{state="active"} 1\nkong_nginx_http_current_connections{state="handled"} 8\nkong_nginx_http_current_connections{state="reading"} 0\nkong_nginx_http_current_connections{state="total"} 8\nkong_nginx_http_current_connections{state="waiting"} 0\nkong_nginx_http_current_connections{state="writing"} 1\n# HELP kong_memory_lua_shared_dict_bytes Allocated slabs in bytes in a shared_dict\n# TYPE kong_memory_lua_shared_dict_bytes gauge\nkong_memory_lua_shared_dict_bytes{shared_dict="kong",kong_subsystem="http"} 40960\n.\n.\n# HELP kong_memory_lua_shared_dict_total_bytes Total capacity in bytes of a shared_dict\n# TYPE kong_memory_lua_shared_dict_total_bytes gauge\nkong_memory_lua_shared_dict_total_bytes{shared_dict="kong",kong_subsystem="http"} 5242880\n.\n.\n# HELP kong_memory_workers_lua_vms_bytes Allocated bytes in worker Lua VM\n# TYPE kong_memory_workers_lua_vms_bytes gauge\nkong_memory_workers_lua_vms_bytes{pid="7281",kong_subsystem="http"} 41124353\n# HELP kong_data_plane_config_hash Config hash value of the data plane\n# TYPE kong_data_plane_config_hash gauge\nkong_data_plane_config_hash{node_id="d4e7584e-b2f2-415b-bb68-3b0936f1fde3",hostname="ubuntu-bionic",ip="127.0.0.1"} 1.7158931820287e+38\n# HELP kong_data_plane_last_seen Last time data plane contacted control plane\n# TYPE kong_data_plane_last_seen gauge\nkong_data_plane_last_seen{node_id="d4e7584e-b2f2-415b-bb68-3b0936f1fde3",hostname="ubuntu-bionic",ip="127.0.0.1"} 1600190275\n# HELP kong_data_plane_version_compatible Version compatible status of the data plane, 0 is incompatible\n# TYPE kong_data_plane_version_compatible gauge\nkong_data_plane_version_compatible{node_id="d4e7584e-b2f2-415b-bb68-3b0936f1fde3",hostname="ubuntu-bionic",ip="127.0.0.1",kong_version="2.4.1"} 1\n# HELP kong_nginx_metric_errors_total Number of nginx-lua-prometheus errors\n# TYPE kong_nginx_metric_errors_total counter\nkong_nginx_metric_errors_total 0\n# HELP kong_upstream_target_health Health status of targets of upstream. States = healthchecks_off|healthy|unhealthy|dns_error, value is 1 when state is populated.\nkong_upstream_target_health{upstream="<upstream_name>",target="<target>",address="<ip>:<port>",state="healthchecks_off",subsystem="http"} 0\nkong_upstream_target_health{upstream="<upstream_name>",target="<target>",address="<ip>:<port>",state="healthy",subsystem="http"} 1\nkong_upstream_target_health{upstream="<upstream_name>",target="<target>",address="<ip>:<port>",state="unhealthy",subsystem="http"} 0\nkong_upstream_target_health{upstream="<upstream_name>",target="<target>",address="<ip>:<port>",state="dns_error",subsystem="http"} 0\n\n\n')))}i.isMDXComponent=!0}}]);